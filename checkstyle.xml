<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">
	<property name="charset" value="UTF-8"/>
	<property name="severity" value="warning"/>
	<property name="fileExtensions" value="java, properties, xml"/>

	<!-- Checks whether files end with a new line.                        -->
	<!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
	<module name="NewlineAtEndOfFile">
		<property name="lineSeparator" value="lf_cr_crlf"/>
	</module>

	<!-- Checks that property files contain the same keys.         -->
	<!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
	<module name="Translation"/>

	<!-- Checks for Size Violations.                    -->
	<!-- See http://checkstyle.sf.net/config_sizes.html -->
	<module name="FileLength"/>

	<!-- Checks for whitespace                               -->
	<!-- See http://checkstyle.sf.net/config_whitespace.html -->
	<module name="FileTabCharacter">
		<property name="eachLine" value="true"/>
		<property name="fileExtensions" value="*.java"/>
	</module>

	<module name="SuppressWarningsFilter" />


	<module name="TreeWalker">

		<!-- Miscellaneous other checks.                   -->
		<!-- See http://checkstyle.sf.net/config_misc.html -->
		<module name="RegexpSinglelineJava">
			<property name="format" value="^\t* +\t*\S" />
			<property name="message" value="Line has leading space characters; indentation should be performed with tabs only." />
			<property name="ignoreComments" value="true" />
		</module>

		<module name="OuterTypeFilename"/>
		<module name="IllegalTokenText">
			<property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
			<property name="format" value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
			<property name="message" value="Avoid using corresponding octal or Unicode escape."/>
		</module>
		<module name="AvoidEscapedUnicodeCharacters">
			<property name="allowEscapesForControlCharacters" value="true"/>
			<property name="allowByTailComment" value="true"/>
			<property name="allowNonPrintableEscapes" value="true"/>
		</module>
		<module name="OneTopLevelClass"/>
		<module name="NoLineWrap"/>

		<!-- Checks for Size Violations.                    -->
		<!-- See http://checkstyle.sf.net/config_sizes.html -->
		<module name="LineLength">
			<property name="max" value="120"/>
			<property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
		</module>
		<module name="MethodLength"/>
		<module name="ParameterNumber"/>


		<!-- Checks for imports                              -->
		<!-- See http://checkstyle.sf.net/config_import.html -->
		<module name="IllegalImport"/>
		<module name="RedundantImport"/>
		<module name="UnusedImports">
			<property name="processJavadoc" value="false"/>
		</module>

		<!-- Checks for blocks. You know, those {}'s         -->
		<!-- See http://checkstyle.sf.net/config_blocks.html -->
		<module name="AvoidNestedBlocks"/>
		<module name="EmptyBlock">
			<property name="option" value="TEXT"/>
			<property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
		</module>
		<module name="NeedBraces"/>
		<module name="LeftCurly">
			<property name="maxLineLength" value="100"/>
		</module>
		<module name="RightCurly"/>
		<module name="RightCurly">
			<property name="option" value="alone"/>
			<property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT"/>
		</module>

		<!-- Checks for whitespace                               -->
		<!-- See http://checkstyle.sf.net/config_whitespace.html -->
		<module name="GenericWhitespace">
			<message key="ws.followed"
					 value="GenericWhitespace ''{0}'' is followed by whitespace."/>
			<message key="ws.preceded"
					 value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
			<message key="ws.illegalFollow"
					 value="GenericWhitespace ''{0}'' should followed by whitespace."/>
			<message key="ws.notPreceded"
					 value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
		</module>
		<module name="EmptyForIteratorPad"/>
		<module name="ParenPad"/>
		<module name="TypecastParenPad"/>
		<module name="WhitespaceAfter"/>
		<module name="WhitespaceAround">
			<property name="allowEmptyConstructors" value="true"/>
			<property name="allowEmptyMethods" value="true"/>
			<property name="allowEmptyTypes" value="true"/>
			<property name="allowEmptyLoops" value="true"/>
			<message key="ws.notFollowed"
					 value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
			<message key="ws.notPreceded"
					 value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
		</module>
		<module name="OneStatementPerLine"/>
		<module name="MultipleVariableDeclarations"/>
		<module name="MethodParamPad"/>
		<module name="NoWhitespaceAfter"/>
		<module name="NoWhitespaceBefore"/>
		<module name="OperatorWrap">
			<property name="option" value="NL"/>
			<property name="tokens" value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR "/>
		</module>

		<!-- Miscellaneous other checks.                   -->
		<!-- See http://checkstyle.sf.net/config_misc.html -->
		<module name="ArrayTypeStyle"/>
		<module name="FinalParameters"/>
		<module name="TodoComment"/>
		<module name="UpperEll"/>

		<!-- Checks for common coding problems               -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="EmptyStatement"/>
		<module name="EqualsHashCode"/>
		<module name="HiddenField">
			<property name="ignoreSetter" value="true"/>
			<property name="setterCanReturnItsClass" value="true"/>
			<property name="ignoreConstructorParameter" value="true"/>
		</module>
		<module name="IllegalInstantiation"/>
		<module name="InnerAssignment"/>
		<module name="MagicNumber"/>
		<module name="MissingSwitchDefault"/>
		<module name="SimplifyBooleanExpression"/>
		<module name="SimplifyBooleanReturn"/>

		<!-- Checks for class design                         -->
		<!-- See http://checkstyle.sf.net/config_design.html -->
		<module name="HideUtilityClassConstructor"/>
		<module name="InterfaceIsType"/>
		<module name="VisibilityModifier"/>
		<module name="FallThrough"/>

		<!-- Modifier Checks                                    -->
		<!-- See http://checkstyle.sf.net/config_modifiers.html -->
		<module name="ModifierOrder"/>
		<module name="RedundantModifier"/>

		<!-- Separator Checks                                    -->
		<module name="EmptyLineSeparator">
			<property name="allowNoEmptyLineBetweenFields" value="true"/>
		</module>
		<module name="SeparatorWrap">
			<property name="tokens" value="DOT"/>
			<property name="option" value="nl"/>
		</module>
		<module name="SeparatorWrap">
			<property name="tokens" value="COMMA"/>
			<property name="option" value="EOL"/>
		</module>

		<!-- Checks for Naming Conventions.                  -->
		<!-- See http://checkstyle.sf.net/config_naming.html -->
		<module name="PackageName">
			<property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
			<message key="name.invalidPattern"
					 value="Package name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="TypeName">
			<message key="name.invalidPattern"
					 value="Type name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="ConstantName"/>
		<module name="LocalFinalVariableName"/>
		<module name="StaticVariableName"/>
		<module name="MemberName">
			<property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
			<message key="name.invalidPattern"
					 value="Member name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="MethodName">
			<property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
			<message key="name.invalidPattern"
					 value="Method name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="ParameterName">
			<property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
			<message key="name.invalidPattern"
					 value="Parameter name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="CatchParameterName">
			<property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
			<message key="name.invalidPattern"
					 value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="LocalVariableName">
			<property name="tokens" value="VARIABLE_DEF"/>
			<property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
			<property name="allowOneCharVarInForLoop" value="true"/>
			<message key="name.invalidPattern"
					 value="Local variable name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="ClassTypeParameterName">
			<property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
			<message key="name.invalidPattern"
					 value="Class type name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="MethodTypeParameterName">
			<property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
			<message key="name.invalidPattern"
					 value="Method type name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="InterfaceTypeParameterName">
			<property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
			<message key="name.invalidPattern"
					 value="Interface type name ''{0}'' must match pattern ''{1}''."/>
		</module>

		<!-- Checks for Catch and final.                  -->
		<module name="NoFinalizer"/>
		<module name="EmptyCatchBlock">
			<property name="exceptionVariableName" value="expected"/>
		</module>

		<module name="AbbreviationAsWordInName">
			<property name="ignoreFinal" value="false"/>
			<property name="allowedAbbreviationLength" value="8"/>
		</module>
		<module name="OverloadMethodsDeclarationOrder"/>
		<module name="VariableDeclarationUsageDistance"/>

		<module name="AnnotationLocation">
			<property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
		</module>
		<module name="AnnotationLocation">
			<property name="tokens" value="VARIABLE_DEF"/>
			<property name="allowSamelineMultipleAnnotations" value="true"/>
		</module>
		<module name="NonEmptyAtclauseDescription"/>

		<!-- Checks for Java Docs.
        <module name="JavadocTagContinuationIndentation"/>
        <module name="SummaryJavadoc">
            <property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>
        <module name="JavadocParagraph"/>
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
        <module name="JavadocMethod">
            <property name="scope" value="public"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingThrowsTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="minLineCount" value="2"/>
            <property name="allowedAnnotations" value="Override, Test"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>
        </module>
		<module name="JavadocType"/>
        <module name="JavadocVariable"/>
        <module name="JavadocStyle"/>
        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="false"/>
        </module>  -->

		<module name="SuppressWarningsHolder" />
	</module>
</module>
