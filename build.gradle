import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        maven {
            url 'http://prod-vm-fv-ag-snx-x1.budgetdirect.com.au:8081/nexus/content/groups/public'
        }
        maven {
			url "https://plugins.gradle.org/m2/"
		}
		maven {
			url 'https://oss.sonatype.org/content/repositories/snapshots'
		}
		maven {
			url 'https://oss.sonatype.org/content/repositories/releases'
		}
		maven { url 'http://repo.spring.io/plugins-release' }
		mavenCentral()
		mavenLocal()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
		classpath 'com.matthewcasperson:build:0.+'
    }
}

plugins {
  id 'com.gradle.build-scan' version '1.8'
}

buildScan {
  licenseAgreementUrl = 'https://gradle.com/terms-of-service'
  licenseAgree = 'yes'
}

/*
 Define the URL to the internal Nexus instance
*/
def nexusProxy = 'http://prod-vm-fv-ag-snx-x1.budgetdirect.com.au:8081/nexus/content/groups/public'

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.matthewcasperson.build.iridium'

mainClassName = "au.com.agic.apptesting.Main"

def alias = hasProperty("KeystoreAlias") ? getProperty("KeystoreAlias") : System.getenv("KeystoreAlias")
def keystore = hasProperty("KeystoreName") ? getProperty("KeystoreName") : System.getenv("KeystoreName")
def storepass = hasProperty("KeystoreStorePass") ? getProperty("KeystoreStorePass") : System.getenv("KeystoreStorePass")
def keypass = hasProperty("KeystorePass") ? getProperty("KeystorePass") : System.getenv("KeystorePass")

jacocoTestReport {
	reports {
		xml.enabled = true
	}

	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it, includes: ['au/com/agic/apptesting/**'])
		})
	}
}

check.dependsOn jacocoTestReport

task signJar(dependsOn: shadowJar) {
	doLast {
		ant.delete(dir: 'build/signed')
		ant.mkdir(dir: 'build/signed')
		ant.signjar(
			jar: jar.archivePath,
			destDir: 'build/signed',
			alias: alias,
			keystore: keystore,
			storepass: storepass,
			keypass: keypass)
	}
}

jar {
    manifest {
        attributes(
                "Permissions": "all-permissions",
                /*
                    ZAP makes some assumptions about the availability of these settings. We copy them
                    from the ZAP MAINIFEST.MF file.
                 */
                "Create-Date": "2016-06-03",
                "Implementation-Version": "2.5.0"
        )
    }
}

shadowJar {
    classifier = ''
    transform(ServiceFileTransformer) {
        path = 'META-INF/spring.*'
        include 'spring.*'
    }
}

/*
    Save the current date and time in the properties file
 */
processResources {
    filesMatching('**/build.properties') {
        filter ReplaceTokens, tokens: [
                "Build": new Date().format("yyyyMMddHHmmss")
        ]
    }
}

repositories {
	maven { url nexusProxy }
    mavenCentral()
    mavenLocal()
}

def slimBuild = hasProperty('slimBuild') && 'true'.equalsIgnoreCase(getProperty('slimBuild').toString());
if (slimBuild) {
	System.out.println("Slim Build Enabled");
}

/*
	This removes the distributions from the maven upload.
	See https://discuss.gradle.org/t/how-to-exclude-zip-only-from-archives-for-maven-repo-upload/13354/2
 */
configurations.archives.with {
	artifacts.remove artifacts.find { it.archiveTask.is distZip }
	artifacts.remove artifacts.find { it.archiveTask.is distTar }
}

/*
	A slim build has no divers and does not include ZAP
 */
sourceSets {
	main {
		resources {
			srcDir (slimBuild ? 'src/main/resources-slim' : 'src/main/resources-full')
		}
	}
}

def mysqlDriverVersion = '5.1.34'
def guavaVersion = '23.0'
def seleniumVersion = '3.4.0'
def htmlUnitDriverVersion = '2.26'
def validationVersion = '1.1.0.Final'
def cucumberVersion = '1.2.5'
def logbackVersion = '1.1.7'
def slf4jVersion = '1.7.21'
def threadPoolVersion = '20030513.073905'
def commonsIoVersion = '2.5'
def commonsLangVersion = '3.4'
def commonsExecVersion = '1.3'
def operaDriverVersion = '1.5'
def phantomJsDriverVersion = '1.4.1'        // https://github.com/detro/ghostdriver/issues/397
def cucumberHtmlFormatterVersion = '0.2.3'
def monteRepackVersion = '1.0.1'
def vavrVersion = '0.9.0'
def zapAPIVersion = '1.0.0'
def browsermobVersion = '2.1.5-SNAPSHOT'
def compressCommonsVersion = '1.12'
def xmlApisVersion =  '1.4.01'
def sysoutOverSLF4JVersion = '1.0.2'
def cucumberSpringVersion = '1.2.5'
def springFrameworkVersion = '4.3.7.RELEASE'
def aspectJVersion='1.8.9'
def springRetryVersion='1.2.0.RELEASE'

configurations.all {
	resolutionStrategy {
		//force 'com.google.guava:guava:' + guavaVersion
	}
}

dependencies {
    compile 'org.springframework:spring-core:' + springFrameworkVersion
    compile 'org.springframework:spring-test:' + springFrameworkVersion
    compile 'org.springframework:spring-beans:' + springFrameworkVersion
    compile 'org.springframework:spring-context:' + springFrameworkVersion
    compile 'org.springframework:spring-context-support:' + springFrameworkVersion
    compile 'org.springframework:spring-tx:' + springFrameworkVersion
    compile 'org.springframework:spring-aop:' + springFrameworkVersion
    compile 'org.aspectj:aspectjweaver:' + aspectJVersion
    compile 'org.aspectj:aspectjrt:' + aspectJVersion
    compile 'info.cukes:cucumber-spring:' + cucumberSpringVersion
    compile 'info.cukes:cucumber-java:' + cucumberVersion
    compile 'info.cukes:cucumber-html:' + cucumberHtmlFormatterVersion
    compile 'mysql:mysql-connector-java:' + mysqlDriverVersion
    compile 'com.google.guava:guava:' + guavaVersion
    compile 'org.seleniumhq.selenium:selenium-java:' + seleniumVersion
	compile 'org.seleniumhq.selenium:selenium-api:' + seleniumVersion
    compile 'javax.validation:validation-api:' + validationVersion
    compile 'ch.qos.logback:logback-classic:' + logbackVersion
    compile 'ch.qos.logback:logback-core:' + logbackVersion
    compile 'org.slf4j:jul-to-slf4j:' + slf4jVersion
    compile 'commons-threadpool:commons-threadpool:' + threadPoolVersion
    compile 'commons-io:commons-io:' + commonsIoVersion
	compile 'org.apache.commons:commons-exec:' + commonsExecVersion
	compile 'org.apache.commons:commons-lang3:' + commonsLangVersion
	compile 'org.seleniumhq.selenium:htmlunit-driver:' + htmlUnitDriverVersion
	compile 'org.seleniumhq.selenium:selenium-remote-driver:' + seleniumVersion
	compile 'org.seleniumhq.selenium:selenium-chrome-driver:' + seleniumVersion
    compile 'org.seleniumhq.selenium:selenium-firefox-driver:' + seleniumVersion
    compile 'org.seleniumhq.selenium:selenium-safari-driver:' + seleniumVersion
    compile 'com.codeborne:phantomjsdriver:' + phantomJsDriverVersion
    compile 'com.opera:operadriver:' + operaDriverVersion
    compile 'org.seleniumhq.selenium:selenium-ie-driver:' + seleniumVersion
    compile 'com.pojosontheweb:monte-repack:' + monteRepackVersion
	compile group: 'io.vavr', name: 'vavr', version: vavrVersion
    compile 'org.zaproxy:zap-clientapi:' + zapAPIVersion
    compile files ("lib/zap-2.5.0.jar", "lib/cucumber-core-1.2.5-AG-SNAPSHOT.jar")
    //compile 'net.lightbody.bmp:browsermob-core:' + browsermobVersion
    compile 'com.matthewcasperson:browsermob-core:' + browsermobVersion // use a snapshot build to work around guava incompatibilities until 2.1.5 is officially released
	compile files('lib/something_local.jar')
	compile group: 'org.apache.commons', name: 'commons-compress', version: compressCommonsVersion
	compile group: 'xml-apis', name: 'xml-apis', version: xmlApisVersion
    compile group: 'uk.org.lidalia', name: 'sysout-over-slf4j', version: sysoutOverSLF4JVersion
	compile group: 'org.springframework.retry', name: 'spring-retry', version: springRetryVersion
	compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.5.3'
	compile group: 'org.json', name: 'json', version: '20170516'

	/*
        The following are dependencies required by ZAP
     */
    compile group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1.0.redhat-7'
    compile group: 'edu.stanford.ejalbert', name: 'BrowserLauncher2', version: '1.3'
    compile group: 'org.owasp.jbrofuzz', name: 'jbrofuzz', version: '2.5.1'
    compile group: 'org.owasp.jbrofuzz', name: 'jbrofuzz-encoder', version: '2.5.1'
    compile group: 'org.apache.ant', name: 'ant', version: '1.10.1'
    compile group: 'org.bouncycastle', name: 'bcmail-jdk15on', version: '1.57'
    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.57'
    compile group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.57'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.10'
    compile group: 'org.apache.commons', name: 'commons-csv', version: '1.4'
    compile group: 'commons-jxpath', name: 'commons-jxpath', version: '1.3'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    compile group: 'commons-logging', name: 'commons-logging', version: '1.2'
    compile group: 'commons-logging', name: 'commons-logging-api', version: '1.1'
    compile group: 'com.googlecode.java-diff-utils', name: 'diffutils', version: '1.3.0'
    compile group: 'net.sf.ezmorph', name: 'ezmorph', version: '1.0.6'
    compile group: 'edu.umass.cs.benchlab', name: 'harlib', version: '1.1.2'
    compile group: 'org.hsqldb', name: 'hsqldb', version: '2.4.0'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3'
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.6'
    compile group: 'com.github.zafarkhaja', name: 'java-semver', version: '0.9.0'
    compile group: 'org.jdom', name: 'jdom', version: '1.1.3'
    compile group: 'net.htmlparser.jericho', name: 'jericho-html', version: '3.4'
    compile group: 'org.jfree', name: 'jfreechart', version: '1.0.19'
    compile group: 'org.jgrapht', name: 'jgrapht-core', version: '1.0.1'
    compile group: 'com.sun.woodstock.dependlibs', name: 'jh', version: '2.0'
    compile group: 'net.sf.json-lib', name: 'json-lib', version: '2.4', classifier: 'jdk15'
    compile group: 'com.yuvimasory', name: 'orange-extensions', version: '1.3.0'
    compile group: 'com.fifesoft', name: 'rsyntaxtextarea', version: '2.6.1'
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.19.3'
    compile group: 'org.swinglabs', name: 'swingx', version: '1.6.1'
    compile group: 'com.io7m.xom', name: 'xom', version: '1.2.10'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'

    compile 'junit:junit:4.12'
}

/*
    System properties need to be passed into the JVM running the tests
 */
def passThroughProperties = [
        "webdriver.chrome.driver",
        "webdriver.ie.driver",
        "webdriver.opera.driver",
        "phantomjs.binary.path",
        "testDestination",
        "testSource",
        "groupName",
        "featureGroupName",
        "configuration",
        "leaveWindowsOpen",
        "localBrowser",
        "appURLOverride",
        "numberDataSets",
        "numberOfThreads",
        "tagsOverride",
        "dataset",
        "openReportFile",
        "saveReportsInHomeDir",
        "importBaseUrl",
        "numberURLs",
        "enableVideoCapture",
        "enableScenarioScreenshots",
        "startInternalProxy",
        "externalProxyHost",
        "externalProxyPort",
        "externalProxyUsername",
        "externalProxyPassword",
        "externalProxyRealm",
		"newBrowserPerScenario",
		"failAllAfterFirstScenarioError",
		"phantomJSUserAgent",
		"testBrowsers",
        "testRetryCount",
        "dryRun",
        "monochromeOutput"
]

test {
	testLogging.showStandardStreams = true
	for (p in passThroughProperties) {
        systemProperty p, System.properties[p]
    }
}

run {
    for (p in passThroughProperties) {
        systemProperty p, System.properties[p]
    }
}
